import ddf.minim.*;//minimライブラリをインポート(追加する)
Minim minim;//Minim型の変数名minimを宣言
AudioPlayer player_sound;//AudioPlayer型の変数名player_soundを宣言


float PlayerPositionX = 12;
float PlayerPositionY = 100;
int move = 1;
float vx = 0;
float vy = 0;
boolean flag = false;
//各型の変数を宣言
  
PImage img;
PImage player;
//PImage型の変数名、img、playerを宣言
  
int live1;
int live2;
int live3;
//必要になり次第フラグを追加する

Player b1;
  
  
void setup()
{
  //BGMの読み込みと再生。ループ機能をつけている。
    minim = new Minim(this);
    player_sound = minim.loadFile("1588.mp3");//指定された名前の音楽ファイルをロード
    player_sound.play();//ロードした音楽ファイルを再生
    player_sound.loop();//再生された音楽にループ機能をつける
    
    vx = 3;
    
    live1 = 0;        
    live2 = 0;    
    live3 = 0;    
//宣言に応じてフラグを追加する        
  
    size(640,450);
    
    img = loadImage("111.jpg");//指定された名前の画像ファイルをロード
    player = loadImage("player.png");//指定された画像ファイルのロード
    frameRate(60);//１秒間に表示するコマの数
    smooth();//オブジェクトにアンチエイリアスをつけている
    
    b1 = new Player(30,250,100);
}


void draw()
{
    /*color c = get(PlayerPositionX,PlayerPositionY);
    if(c == color(-2105377) && flag == false)
    {
      PlayerPositionX = 100;
      flag = true;
    }
    if( c != color(-2105377) && flag == true)
    {
      flag = false;
    }*/
    
  
    background(0);
    
    image (img, 0, 0, 640, 340);//ロードした画像を、640x340のサイズで背景画像としている
    


    enemy();//void enemy を召還
    object();//void object を召還
    player();// void player を召還
    keyPressed();//void keyPressed を召還
    keyReleased();//void keyReleased を召還
    tutorial();//void tutorial を召還
    b1.update();//class Player のオブジェクトを更新させながら召還(?)

}

void object()
{
    fill(255);//void内のオブジェクトに色をつける ()の中身が色  RGBで色を指定するときは、(R(数値),G(数値),B(数値))というようにする
    rect(0, 330, 640, 800);//四角形のオブジェクトを　(x座標,y座標,x方向の長さ,y方向の長さ)で召還
    rect(0, 70, 60, -73);//以下同文

    // rect(150, 150, 60, -150);
    // rect(150, 370, 60, -150);
    // rect(270, 250, 180, -150);
    // rect(270, 440,180,-150);
    // rect(270, 60, 180, -150);
    // rect(490, 370, 60, -150);
    // rect(490, 370, 60, -150);
    // rect(490, 100, 60, -150);
}

void enemy()
{
    color(-2105377);
    rect(400, 310, 30, 40);
}

void player()
{ 
    image (player, PlayerPositionX, PlayerPositionY, 20.0, 20.0);

    PlayerPositionY += 7; //重力をプレイヤーに追加する

    if( PlayerPositionY > height )
      {
        PlayerPositionY = 0;   
      }
    if( PlayerPositionY < 0 )
      {
        PlayerPositionY = 340;//もし、プレイヤーが画面から出てしまった場合、でた方向の反対側から出てくるようにする
      }
    if( PlayerPositionX < 0 )
      {
        PlayerPositionX = 4;//画面の左側に壁を作る
      }
    if( PlayerPositionY >311)
      {
        PlayerPositionY = 311;
      }
    

}
void keyPressed()
{
  if(live3 == 0){
  if( keyPressed == true )
  {
    if(key == CODED)
    {   //もし、押されたキーにコードがあったら、指定されたイベントを開始する
    if(keyCode == UP)
      {
        live1 = 1;

        vy -= move;
        PlayerPositionY += vy;
        
        if(vy < -3)
        {
          live1 = 2;
          
          vy = -3;
          PlayerPositionY += vy;
        }
      }
       
             if(keyCode == LEFT)
               {
                 live1 = 3;
        
                 vx -= move;
                 PlayerPositionX += vx;
                 //もし、←キーを押したら、左に移動する速さを加速させながら移動する
                 
                 if(vx < -3)
                   {
                     live1 = 4;
                     
                     vx = -3;
                     PlayerPositionX += vx;
                     //もし、右に移動する早さが一定値を超えたら加速を停止し、キーを押している間は一定速度で移動するようにする
                   }
               }
  
                      if(keyCode == RIGHT )
                        {     
                          live1 = 5;           
         
                          vx += move;     
                          PlayerPositionX += vx;
                          //もし、→キーをクリックしたら右に移動する速さを加速しながら移動する
            
                          if(vx > 3)
                            {             
                              live1 = 6;

                              vx = 3;
                              PlayerPositionX += vx;
                              //もし、右に移動する早さが一定値を超えたら加速を停止し、キーを押している間は一定速度で移動するようにする
                            }
                         }   
                      }   
                   }     
                }        
             }  


/*void keyReleased()//現在廃止中
{
    if(key == 'g')
    {
        live1 = 0;
        live2 = 1;
            if(live2 == 1)
    {
                vx -= 0.25;
                if(vx < 0)
        {
                    live2 = 0;
                    vx = 0;
                }
            }
        }
    }*/

         
void tutorial()
{
   if( PlayerPositionX < 200 )//プレイヤーのx座標が、x +200より小さかった場合
   {
     textFont(createFont("HGPｺﾞｼｯｸM", 23));//テキストのフォントを ("フォント名",フォントサイズ(数値))で表示できるようにする(グローバル?)
     text("A,Dを押して移動しよう！",width/5,height/3); //  テキストを x/5,y/3 の位置に表示
   }
         
        if( PlayerPositionX > 200)//プレイヤーのx座標が、x +200より大きかった場合
        {
           text("灰色の物体に当たると右上の体力ゲージが減る！", width/9, height/3);//  テキストを x/9,y/3 の位置に表示
        }
   }


class Player
{
  int x11,y11,size11;
  
Player(int x1,int y1,int size1){
  x11 = 30;
  y11 = 200;
  size11 = 20;
}
  void update()
  {
    ellipse(x11,y11,size11,size11);
    keyPressed();
  }
}

void stop()//アプリケーションを終了させた際の動作
{
    player_sound.close();//音楽の再生をストップ
    minim.stop();//音楽再生ライブラリのストップ
}
